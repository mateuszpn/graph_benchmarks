#include "framework/l0/levelzero.h"
#include "framework/test_case/register_test_case.h"
#include "framework/utility/file_helper.h"
#include "framework/utility/timer.h"

#include "definitions/sin_kernel_graph.h"
#include "sin_common_l0.h"

#include <iostream>
#include <level_zero/ze_api.h>
#include <math.h>

// shape of model input (ABCD in general)
const size_t a = 2, b = 4, c = 8, d = 1024;
// const size_t a = 2, b = 2, c = 2, d = 32;
const size_t N = a * b * c * d;

static TestResult run(const SinKernelGraphArguments &arguments,
                      Statistics &statistics) {
  MeasurementFields typeSelector(MeasurementUnit::Microseconds,
                                 MeasurementType::Cpu);

  if (isNoopRun()) {
    statistics.pushUnitAndType(typeSelector.getUnit(), typeSelector.getType());
    return TestResult::Nooped;
  }
  std::size_t numKernels = arguments.numKernels;
  bool withGraphs = arguments.withGraphs;

  // Setup
  LevelZero levelzero;
  Timer timer;
  TestResult result = TestResult::Success;
  deviceMemMgr.init(&levelzero);

  // TODO: check if the device supports the required features

  // Create kernel
  auto spirvModuleA =
      FileHelper::loadBinaryFile("graph_api_benchmark_kernel_assign.spv");
  auto spirvModuleS =
      FileHelper::loadBinaryFile("graph_api_benchmark_kernel_sin.spv");

  if (spirvModuleA.size() == 0 || spirvModuleS.size() == 0) {
    return TestResult::KernelNotFound;
  }

  ze_module_handle_t moduleA, moduleS;
  ze_kernel_handle_t kernelA, kernelS;

  ze_module_desc_t moduleDescA{ZE_STRUCTURE_TYPE_MODULE_DESC};
  ze_module_desc_t moduleDescS{ZE_STRUCTURE_TYPE_MODULE_DESC};

  moduleDescA.format = moduleDescS.format = ZE_MODULE_FORMAT_IL_SPIRV;

  moduleDescA.pInputModule =
      reinterpret_cast<const uint8_t *>(spirvModuleA.data());
  moduleDescS.pInputModule =
      reinterpret_cast<const uint8_t *>(spirvModuleS.data());

  moduleDescA.inputSize = spirvModuleA.size();
  moduleDescS.inputSize = spirvModuleS.size();

  ze_kernel_desc_t kernelDescA{ZE_STRUCTURE_TYPE_KERNEL_DESC};
  ze_kernel_desc_t kernelDescS{ZE_STRUCTURE_TYPE_KERNEL_DESC};

  kernelDescA.pKernelName = "assign_kernel";
  kernelDescS.pKernelName = "sin_kernel";

  ASSERT_ZE_RESULT_SUCCESS(zeModuleCreate(levelzero.context, levelzero.device,
                                          &moduleDescA, &moduleA, nullptr));
  ASSERT_ZE_RESULT_SUCCESS(zeModuleCreate(levelzero.context, levelzero.device,
                                          &moduleDescS, &moduleS, nullptr));

  ASSERT_ZE_RESULT_SUCCESS(zeKernelCreate(moduleA, &kernelDescA, &kernelA));
  ASSERT_ZE_RESULT_SUCCESS(zeKernelCreate(moduleS, &kernelDescS, &kernelS));

  // prepare host data for model input

  const ze_host_mem_alloc_desc_t hostAllocationDesc{
      ZE_STRUCTURE_TYPE_HOST_MEM_ALLOC_DESC};
  void *input_h = nullptr;
  const auto inputSize = sizeof(float) * N;

  ASSERT_ZE_RESULT_SUCCESS(zeMemAllocHost(
      levelzero.context, &hostAllocationDesc, inputSize, 4, &input_h));

  for (size_t i = 0; i < N; ++i) {
    reinterpret_cast<float *>(input_h)[i] = random_float();
  }
  /*
    // Create events
    ze_event_pool_handle_t eventPool{};
    ze_event_pool_desc_t eventPoolDesc{ZE_STRUCTURE_TYPE_EVENT_POOL_DESC};
    ze_event_handle_t event{};
    ze_event_desc_t eventDesc{ZE_STRUCTURE_TYPE_EVENT_DESC};

    eventPoolDesc.flags = ZE_EVENT_POOL_FLAG_HOST_VISIBLE;
    eventPoolDesc.count = static_cast<uint32_t>(1);
    ASSERT_ZE_RESULT_SUCCESS(zeEventPoolCreate(levelzero.context,
    &eventPoolDesc, 0, nullptr, &eventPool));

    ASSERT_ZE_RESULT_SUCCESS(zeEventCreate(eventPool, &eventDesc, &event));

   */
  // warm up
  std::vector<float> golden_h(N);

  Tensor4D input(a, b, c, d);

  // Host2Device for model input

  ze_command_list_handle_t cmdList;
  ze_command_list_desc_t cmdListDesc = {ZE_STRUCTURE_TYPE_COMMAND_LIST_DESC};
  cmdListDesc.commandQueueGroupOrdinal = levelzero.commandQueueDesc.ordinal;
  cmdListDesc.flags = ZE_COMMAND_LIST_FLAG_IN_ORDER;

  ASSERT_ZE_RESULT_SUCCESS(zeCommandListCreate(
      levelzero.context, levelzero.device, &cmdListDesc, &cmdList));

  ASSERT_ZE_RESULT_SUCCESS(zeCommandListAppendMemoryCopy(
      cmdList, input.data, input_h, input.count() * sizeof(float), nullptr, 0,
      nullptr));

  ASSERT_ZE_RESULT_SUCCESS(zeCommandListClose(cmdList));
  std::cout << "zeCommandQueueExecuteCommandLists 0" << std::endl;
  ASSERT_ZE_RESULT_SUCCESS(zeCommandQueueExecuteCommandLists(
      levelzero.commandQueue, 1, &cmdList, nullptr));
  ASSERT_ZE_RESULT_SUCCESS(zeCommandQueueSynchronize(
      levelzero.commandQueue, std::numeric_limits<uint64_t>::max()));
  ASSERT_ZE_RESULT_SUCCESS(zeCommandListReset(cmdList));

  Tensor4D output =
      run_model(input, numKernels, kernelA, kernelS, levelzero.commandQueue,
                cmdList); //, event, eventPool);

  std::cout << "zeCommandListAppendMemoryCopy" << std::endl;
  ASSERT_ZE_RESULT_SUCCESS(zeCommandListAppendMemoryCopy(
      cmdList, golden_h.data(), output.data, output.count() * sizeof(float),
      nullptr, 0, nullptr));
  ASSERT_ZE_RESULT_SUCCESS(zeCommandListClose(cmdList));
  std::cout << "zeCommandQueueExecuteCommandLists 1" << std::endl;
  ASSERT_ZE_RESULT_SUCCESS(zeCommandQueueExecuteCommandLists(
      levelzero.commandQueue, 1, &cmdList, nullptr));
  ASSERT_ZE_RESULT_SUCCESS(zeCommandQueueSynchronize(
      levelzero.commandQueue, std::numeric_limits<uint64_t>::max()));

  ASSERT_ZE_RESULT_SUCCESS(zeCommandListReset(cmdList));

  std::cout << "zeCommandListReset done" << std::endl;

  deviceMemMgr.free(input.data);
  deviceMemMgr.free(output.data);

  // prepare command group for model input

  Tensor4D gr_input(a, b, c, d);

  // here to start command buffer

  ze_command_list_handle_t execCmdList;

  std::cout << "---> Start exec cmd list" << std::endl;

  ASSERT_ZE_RESULT_SUCCESS(
      zeCommandListCreateImmediate(levelzero.context, levelzero.device,
                                   &levelzero.commandQueueDesc, &execCmdList));

  Tensor4D gr_output =
      run_model(gr_input, numKernels, kernelA, kernelS, levelzero.commandQueue,
                execCmdList); //, event, eventPool);

  std::vector<float> output_h(gr_output.count());

  // compare the results in output_h and golden_h
  auto check_result = [&] {
    bool ret = true;
    for (int ai = 0; ai < gr_output.A; ++ai) {
      for (int bi = 0; bi < gr_output.B; ++bi) {
        for (int ci = 0; ci < gr_output.C; ++ci) {
          for (int di = 0; di < gr_output.D; ++di) {
            int index = di + ci * gr_output.D + bi * gr_output.C * gr_output.D +
                        ai * gr_output.B * gr_output.C * gr_output.D;
            if ((fabs(output_h[index] - golden_h[index]) > 0.0001f) ||
                (fabs(output_h[index]) == 0.0f)) {
              ret = false;
              std::cout << "at (" << ai << ", " << bi << ", " << ci << ", "
                        << di << "), expect " << golden_h[index] << ", but got "
                        << output_h[index] << std::endl;
            }
          }
        }
      }
    }
    return ret;
  };
  // do the check

  ASSERT_ZE_RESULT_SUCCESS(zeCommandListAppendMemoryCopy(
      cmdList, gr_input.data, input_h, gr_input.count() * sizeof(float),
      nullptr, 0, nullptr));
  ASSERT_ZE_RESULT_SUCCESS(zeCommandListClose(cmdList));
  ASSERT_ZE_RESULT_SUCCESS(zeCommandQueueExecuteCommandLists(
      levelzero.commandQueue, 1, &cmdList, nullptr));
  ASSERT_ZE_RESULT_SUCCESS(zeCommandQueueSynchronize(
      levelzero.commandQueue, std::numeric_limits<uint64_t>::max()));
  std::cout << "Do check" << std::endl;

  ASSERT_ZE_RESULT_SUCCESS(zeCommandListReset(cmdList));

  if (!withGraphs) {
    gr_output =
        run_model(gr_input, numKernels, kernelA, kernelS,
                  levelzero.commandQueue, cmdList); //, event, eventPool);
  } else {
    // with graphs
    ASSERT_ZE_RESULT_SUCCESS(zeCommandListClose(execCmdList));
    ASSERT_ZE_RESULT_SUCCESS(zeCommandQueueExecuteCommandLists(
        levelzero.commandQueue, 1, &execCmdList, nullptr));
    ASSERT_ZE_RESULT_SUCCESS(zeCommandQueueSynchronize(
        levelzero.commandQueue, std::numeric_limits<uint64_t>::max()));
  }

  ASSERT_ZE_RESULT_SUCCESS(zeCommandListAppendMemoryCopy(
      cmdList, output_h.data(), gr_output.data,
      gr_input.count() * sizeof(float), nullptr, 0, nullptr));
  ASSERT_ZE_RESULT_SUCCESS(zeCommandListClose(cmdList));
  ASSERT_ZE_RESULT_SUCCESS(zeCommandQueueExecuteCommandLists(
      levelzero.commandQueue, 1, &cmdList, nullptr));
  ASSERT_ZE_RESULT_SUCCESS(zeCommandQueueSynchronize(
      levelzero.commandQueue, std::numeric_limits<uint64_t>::max()));
  ASSERT_ZE_RESULT_SUCCESS(zeCommandListReset(cmdList));

  if (!check_result()) {
    std::cout << "Check FAILED" << std::endl;
    result = TestResult::Error;
  } else {
    int repeat = 100;
    for (std::size_t i = 0; i < arguments.iterations; ++i) {
      if (!withGraphs) {
        Tensor4D bm_input(a, b, c, d);
        Tensor4D bm_output(1, 1, 1, 1);

        timer.measureStart();

        for (int i = 0; i < repeat; ++i) {
          deviceMemMgr.free(bm_output.data);
          ASSERT_ZE_RESULT_SUCCESS(zeCommandListAppendMemoryCopy(
              cmdList, bm_input.data, input_h, gr_input.count() * sizeof(float),
              nullptr, 0, nullptr));
          ASSERT_ZE_RESULT_SUCCESS(zeCommandListClose(cmdList));
          bm_output =
              run_model(bm_input, numKernels, kernelA, kernelS,
                        levelzero.commandQueue, cmdList); //, event, eventPool);
        }
        timer.measureEnd();

        deviceMemMgr.free(bm_input.data);
        deviceMemMgr.free(bm_output.data);
      } else {
        // run with graph
        timer.measureStart();
        // for (int i = 0; i < repeat; ++i) {
        //     // exec_q.memcpy(gr_input.data, input_h, gr_input.count() *
        // sizeof(float));
        //     // exec_q.ext_oneapi_graph(execGraph);
        // }
        // exec_q.wait();
        timer.measureEnd();
      }
      statistics.pushValue(timer.get(), typeSelector.getUnit(),
                           typeSelector.getType());
    }
  }
  deviceMemMgr.free(gr_input.data);
  deviceMemMgr.free(gr_output.data);

  zeMemFree(levelzero.context, input_h);

  deviceMemMgr.deinit();
  return result;
}

[[maybe_unused]] static RegisterTestCaseImplementation<SinKernelGraph>
    registerTestCase(run, Api::L0);